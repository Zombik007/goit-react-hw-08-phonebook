{"version":3,"sources":["Components/FilterContact/FilterContact.module.css","Components/ContactForm/ContactForm.js","Components/ContactList/ContactList.js","Components/FilterContact/FilterContact.js","views/contactsViews/ContactsPageViews.js","views/contactsViews/ContactsViews.module.css","Components/ContactForm/ContactForm.module.css","Components/ContactList/ContactList.module.css"],"names":["module","exports","ContactForm","useState","name","setName","number","setNumber","contacts","useSelector","state","contactsSelectors","getContacts","dispatch","useDispatch","inputChange","e","target","value","resetForm","className","styles","Form","onSubmit","preventDefault","isContactExist","items","find","contact","toast","error","theme","contactsOperations","addContacts","id","uuid","Group","controlId","Label","Control","type","placeholder","onChange","pattern","title","required","Button","variant","classMame","ContactList","isLoading","getVisibleContacts","useEffect","fetchContacts","map","ContactListItem","item","size","onClick","deleteContacts","Filter","getFilter","filter","currentTarget","ContactsViews"],"mappings":"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","file":"static/js/ContactsViews.af5e19d7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"FilterContact_filter__uwdq6\"};","import { useSelector, useDispatch } from \"react-redux\";\nimport { useState } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport { contactsOperations, contactsSelectors } from \"../../redux/contacts\";\nimport { toast } from \"react-toastify\";\nimport { v4 as uuid } from \"uuid\";\nimport styles from \"./ContactForm.module.css\";\n\nexport default function ContactForm() {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const contacts = useSelector((state) => contactsSelectors.getContacts(state));\n  const dispatch = useDispatch();\n\n  const inputChange = (e) => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n\n      case \"number\":\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const formSubmit = (e) => {\n    e.preventDefault();\n    const isContactExist = !!contacts.items.find(\n      (contact) => contact.name === name\n    );\n    isContactExist &&\n      toast.error(\"Contact is already exist\", {\n        theme: \"colored\",\n      });\n    return (\n      !isContactExist &&\n      dispatch(contactsOperations.addContacts({ id: uuid(), name, number })) &&\n      resetForm()\n    );\n  };\n\n  const resetForm = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <div className={styles.contacts}>\n      <Form onSubmit={formSubmit}>\n        <Form.Group className=\"mb-2\" controlId=\"formBasicEmail\">\n          <Form.Label>Name</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Enter name\"\n            name=\"name\"\n            value={name}\n            onChange={inputChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"The name can only consist of letters, apostrophes, dashes and spaces. For example, Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan, etc.\"\n            required\n          />\n        </Form.Group>\n\n        <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n          <Form.Label>Number</Form.Label>\n          <Form.Control\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            placeholder=\"Enter Number\"\n            onChange={inputChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </Form.Group>\n\n        <Button variant=\"primary\" type=\"submit\" classMame=\"ml-5\">\n          Add contact\n        </Button>\n      </Form>\n    </div>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { contactsOperations, contactsSelectors } from \"../../redux/contacts\";\nimport styles from \"./ContactList.module.css\";\nimport { Button } from \"react-bootstrap\";\n\nexport default function ContactList() {\n  const { isLoading, error } = useSelector((state) =>\n    contactsSelectors.getContacts(state)\n  );\n  const contacts = useSelector((state) =>\n    contactsSelectors.getVisibleContacts(state)\n  );\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  if (contacts === []) return null;\n  if (isLoading) return <h2>Loading...</h2>;\n  if (error) return <h1>{error}</h1>;\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <ContactListItem id={id} name={name} number={number} />\n      ))}\n    </ul>\n  );\n}\n\nconst ContactListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <li className={styles.item}>\n      {name}:{number}\n      <Button\n        size=\"sm\"\n        type=\"button\"\n        variant=\"secondary\"\n        onClick={() => dispatch(contactsOperations.deleteContacts(id))}\n      >\n        Delete\n      </Button>\n    </li>\n  );\n};\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { contactsSelectors, filter } from \"../../redux/contacts\";\nimport { Form } from \"react-bootstrap\";\nimport styles from \"./FilterContact.module.css\";\n\nexport default function Filter() {\n  const value = useSelector((state) => contactsSelectors.getFilter(state));\n  const dispatch = useDispatch();\n  return (\n    <div className={styles.filter}>\n      <Form.Group className=\"mb-2\" controlId=\"formBasicEmail\">\n        <Form.Label>Search</Form.Label>\n        <Form.Control\n          type=\"text\"\n          name=\"filter\"\n          value={value}\n          onChange={(e) => dispatch(filter(e.currentTarget.value))}\n          placeholder=\"Enter name for Search\"\n        />\n      </Form.Group>\n    </div>\n  );\n}\n","import styles from \"./ContactsViews.module.css\";\nimport ContactForm from \"../../Components/ContactForm/ContactForm\";\nimport ContactList from \"../../Components/ContactList/ContactList\";\nimport Filter from \"../../Components/FilterContact/FilterContact\";\n\nexport default function ContactsViews() {\n  return (\n    <div>\n      <h2 className={styles.title}>Phonebook</h2>\n      <ContactForm />\n\n      <h2 className={styles.title}>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"ContactsViews_title__3FnAV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ContactForm_contacts__2UwY0\",\"button\":\"ContactForm_button__3xzbo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactList_item__1afY-\"};"],"sourceRoot":""}